## 예제 00)
# 미로탈출 : 문제설명
# 동빈이는 N * M 크기의 직사각형 형태의 미로에 갇힘, 미로에는 여러마리의 괴물이 있어 이를 피해 탈출해야함
# 동빈이의 위치는 (1, 1)이며 미로의 출구는 (N, M)의 위치에 존재하며 한번에 한칸씩 이동할 수 있음
# 이때 괴물이 있는 부분이 0, 없는부분이 1로 표시됨
# 동빈이가 탈출하기 위해 움직여야 하는 최소 칸의 개수를 구하시오 (시작칸과 마지막칸 포함)
# 입력예시 : 5, 6
#          101010
#          111111
#          000001
#          111111
#          111111

# 이문제는 시작지점에서 가까운 노드부터 차례대로 그래프의 모든 노드를 탐색함
# 상, 하, 좌, 우로 연결된 모든 노드로의 거리가 1로 동일함
# 따라서 (1, 1) 지점부터 BFS를 수행하여 모든 노드의 최단거리 값을 기록하면 해결할 수있음

# N, M 을 공백을 기준으로 구분하여 입력받기
# n, m = map (int, input().split())
n, m = 3, 3
# 2차원 리스트의 맵 정보 입력 받기
# graph = []
# for i in range(n):
#     graph.append(list(map(int, input())))
# graph = [[1, 0, 1, 0, 1, 0], [1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 1], [1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1]]
graph = [[1, 0, 1], [1, 1, 1], [0, 0, 1]]
# 이동 할 4가지 방향 정의 (상, 하, 좌, 우)
dx = [-1, 1, 0, 0]
dy = [0, 0, -1, 1]

# BFS 소스코드 구현
from collections import deque

def bfs(x, y):
    # 큐 구현을 위해 deque 라이브러리 사용
    queue = deque()
    queue.append((x, y))
    # 큐가 빌대 까지 반복하기
    while queue:
        print(queue)
        x, y = queue.popleft()
        # 현재 위치에서 4가지 방향으로의 위치확인
        for i in range(4):
            nx = x + dx[i]
            ny = y + dy[i]
            # 미로 찾기 공간을 벗어난 경우 무기
            if nx < 0 or nx >= n or ny < 0 or ny >= m:
                continue
            # 벽인 경우 무시
            if graph[nx][ny] == 0:
                continue
            # 해당 노드를 처음 방문하는 경우에만 최단거리 기록
            if graph[nx][ny] == 1:
                graph[nx][ny] = graph[x][y] + 1
                print(nx, ny)
                print(graph[nx][ny])
                queue.append((nx, ny))

    # 가장 오른쪽 아래까지의 최단 거리 반환
    return graph[n - 1][m - 1]


# BFS를 수행한 결과 출력
print(bfs(0, 0))

# 큐에 넣고 하나씩 빼면서, 상하좌우 확인(벗어나면무시, 벽인경우무시, 처음방문하면 이전꺼에서 1칸추가)
# 처음 방문하는경우 큐에 다시 큐에 넣고 반복
