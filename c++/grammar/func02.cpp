#include<bits/stdc++.h>
using namespace std;

int main(){
    // //////////////////////////////////////////////////////////////////////
    // /**
    //  * unique()
    //  * unique는 범위안에 있는 요소 중 앞에서부터 서로를 비교해가며 중복되는 요소를 제거하고
    //  * 나머지 요소들은 삭제하지 않고 그대로 두는 함수 - O(n) 시간복잡도를 가짐
    //  */
    // //////////////////////////////////////////////////////////////////////
    // vector<int> v;
    // for(int i = 1; i <= 5; i++){
    //     v.push_back(i);
    //     v.push_back(i);
    // }

    // for(int i : v){
    //     cout << i << " ";
    // }
    // cout << '\n';

    // // 중복되지 않은 요소로 채운 후, 그다음 번째 이터레이터를 반환한다.
    // // 1, 1, 2, 2, 3, 3, 4, 4, 5, 5
    // // 1, 2, 3, 4, 5 -> 여기부터 반환 (3, 4, 4, 5, 5)
    // vector<int>::iterator iter1 = unique(v.begin(), v.end());
    // cout << iter1 - v.begin() << '\n'; // 5 - 0 = 5

    // // 앞에서 부터 중복되지 않게 채운 후 나머지 요소들은 그대로 둔다.
    // for(int i : v){
    //     cout << i << " ";
    // }
    // cout << '\n';

    // vector<int> vv {1, 1, 2, 2, 3, 3, 5, 6, 7, 8, 9};
    //              // 1, 2, 3, 4, 5, 6, 7, 8, 7, 8, 9 
    // vector<int>::iterator iter2 = unique(vv.begin(), vv.end());
    // for(int i : vv){
    //     cout << i << " ";
    // }
    // cout << "\n";

    // // sort()와 같이 사용하는 unique()
    // ios_base::sync_with_stdio(false);
    // cin.tie(NULL); cout.tie(NULL);
    // vector<int> s {4, 3, 3, 5, 1, 2, 3};
    // s.erase(unique(s.begin(), s.end()), s.end());
    // for(int i : s){
    //     cout << i << " ";
    // }
    // cout << "\n";

    // vector<int> s2 {4, 3, 3, 5, 1, 2, 3};
    // sort(s2.begin(), s2.end());
    // cout << "정렬 후" << '\n';
    // for(int i : s2){
    //     cout << i << " ";
    // }
    // cout << '\n';

    // cout << "unique로 제거" << '\n';
    // s2.erase(unique(s2.begin(), s2.end()), s2.end());
    // for(int i : s2){
    //     cout << i << " ";
    // }

    //////////////////////////////////////////////////////////////////////
    /**
     * 
     */
    //////////////////////////////////////////////////////////////////////

    //////////////////////////////////////////////////////////////////////
    /**
     * 
     */
    //////////////////////////////////////////////////////////////////////

    //////////////////////////////////////////////////////////////////////
    /**
     * 
     */
    //////////////////////////////////////////////////////////////////////

    //////////////////////////////////////////////////////////////////////
    /**
     * 
     */
    //////////////////////////////////////////////////////////////////////

    //////////////////////////////////////////////////////////////////////
    /**
     * 
     */
    //////////////////////////////////////////////////////////////////////

    //////////////////////////////////////////////////////////////////////
    /**
     * 
     */
    //////////////////////////////////////////////////////////////////////

    //////////////////////////////////////////////////////////////////////
    /**
     * 
     */
    //////////////////////////////////////////////////////////////////////

    //////////////////////////////////////////////////////////////////////
    /**
     * 
     */
    //////////////////////////////////////////////////////////////////////

    //////////////////////////////////////////////////////////////////////
    /**
     * 
     */
    //////////////////////////////////////////////////////////////////////

    //////////////////////////////////////////////////////////////////////
    /**
     * 
     */
    //////////////////////////////////////////////////////////////////////
    return 0;
}