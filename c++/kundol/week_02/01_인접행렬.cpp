#include<bits/stdc++.h>
using namespace std;

const int V  = 4;
bool a[V][V] = {
    {0, 1, 1, 1},
    {1, 0, 1, 0},
    {1, 1, 0, 0},
    {1, 0, 0, 0}
};

const int ten = 10;
bool b[ten][ten];
int visited[ten];

void go(int from);
int main() {
    for(int i = 0; i < V; i++) {
        for(int j = 0; j < V; j++) {
            // 간선이 존재하면?
            if(a[i][j]) {
                // 출력하는 로직
                cout << i << "부터 " << j << "까지 경로가 있습니다.\n";
                // 해당 정점으로부터 탐색하는 로직
                // bfs(i);
                // dfs(i);
            }
        }
    }
    
    /**
     * Q. 3번노드에서 5번노드로 가는 단반향 경로가 있고, 이를 인접행렬로 표현한다면?
     * a[3][5] = 1;
     * 
     * Q. 3번노드에서 5번노드로 가는 양반향 경로가 있고, 이를 인접행렬로 표현한다면?
     * a[3][5] = 1;
     * a[5][3] = 1;
     * 
     * Q. 정점의 갯수가 20개인 그래프가 있음,
     *    이를 인접행렬로 표현한다고 했을 때 메모리를 최소로 쓴다면 배열을 어떻게 만들어야할까?
     * bool b[20][20];
     */

    /**
     * 1번.
     * 정점은 0번 부터 9번까지 10개의 노드가 있다. 1 - 2 /  1 - 3 / 3 - 4 라는 경로가 있다.
     * (1번과 2번, 1번과 3번, 3번과 4번은 연결되어있다.) 
     * 이를  이를 인접행렬로 표현한다면?
     */
    b[1][2] = 1; b[1][3] = 1; b[3][4] = 1;
	b[2][1] = 1; b[3][1] = 1; b[4][3] = 1;

    for(int i = 0; i < ten; i++) {
        for(int j = 0; j < ten; j++) {
            cout << b[i][j] << " ";
        }
        cout << "\n";
    }
    cout << "\n";

    /**
     * 2번.
     * 0번부터 방문안한 노드를 찾고 해당 노드부터 방문,
     * 연결된 노드를 이어서 방문해서 출력하는 재귀함수를 만들고 싶다면 어떻게 해야할까?
     * 또한, 정점을 방문하고 다시 방문하지 않게 만드려면 어떻게 해야할까?
     * 1 - 2 /  1 - 3 / 3 - 4 연결되어 있음
     */
    for(int i = 0; i < ten; i++){
		for(int j = 0; j < ten; j++){
            // 간선이 존재하고 and 방문하지 않았다면?
			if(b[i][j] && visited[i] == 0){
                cout << "go(" << i << ")\n";
				go(i);
			}
		}
	}
    return 0;
}

void go(int from){
    // 방문한 정점을 표기
	visited[from] = 1; 
	cout << from << '\n';
	for(int i = 0; i < ten; i++){
        // 방문한 곳은 재방문 X
		if(visited[i]) {
            cout << "방문한곳 i: (" << i << ")" <<  "\n";
            continue;
        }
        // from과 연결된 간선이 있으면 go()함수 호출
		if(b[from][i]){ 
            cout << "from: " << from << " to: " << i << "\n";
            cout << "go(" << i << ")\n";
			go(i);
		}
	}
	return;
}