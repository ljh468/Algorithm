#include <bits/stdc++.h>
using namespace std;

void printconstRef(const int& x){
    // x = 100; // 에러발생, 여기서 x는 매개변수로 받아온 const int x를 참조
    cout << x;
}

int main(){
    //////////////////////////////////////////////////////////////////////
    /**
     * atoi()
     * 정수로 보이는 문자열을 int로 변경, 문자열은 0을 반환
     */
    //////////////////////////////////////////////////////////////////////
    // string s = "1";
    // string s2 = "amumu";
    // cout << atoi(s.c_str()) << "\n"; // 1
    // cout << atoi(s2.c_str()) << "\n"; // 0

    // string s = "1234";
    // int num = atoi(s.c_str());
    // cout << num; // 1234

    //////////////////////////////////////////////////////////////////////
    /**
     * stoi()
     * 정수로 보이는 문자열을 int로 변경, 문자열은 에러를 반환
     */
    //////////////////////////////////////////////////////////////////////
    // string s1 = "1234";
    // string s2 = "aavv";
    // int num1 = stoi(s1);
    // int num2 = stoi(s2);
    // cout << num1; // 1234
    // cout << num2; // std::invalid_argument 에러

    //////////////////////////////////////////////////////////////////////
    // /**
    //  * bool, 참과 거짓
    //  * 1바이트, true(0이 아닌값) 또는 false(0)
    //  */
    //////////////////////////////////////////////////////////////////////
    // ios_base::sync_with_stdio(false);
    // cin.tie(NULL); cout.tie(NULL);
    // int a = -1;
    // cout << bool(a) << "\n";
    // a = 0;
    // cout << bool(a) << "\n";
    // a = 3;
    // cout << bool(a) << "\n";

    //////////////////////////////////////////////////////////////////////
    // /**
    //  * int, 4바이트짜리 정수 (-2,147,483,648 ~ 2,147,483,647) - 20억개
    //  * int로 선언한 변수끼리 연산을 하게 되었을 때 실수가 나온다면 소수점 아래에 있는 수는 모두 버림이 됨
    //  */
    //////////////////////////////////////////////////////////////////////
    // ios_base::sync_with_stdio(false);
    // cin.tie(NULL); cout.tie(NULL);
    // int a = 3;
    // int b = 2;
    // cout << a / b << "\n"; // 1

    // double c = 3;
    // double d = 2;
    // cout << c / d << "\n"; // 1.5

    //////////////////////////////////////////////////////////////////////
    // /**
    //  * const (수정할 수 없는 변수) - 상수
    //  * 보통 INF 같은 것이나 방향벡터를 나타내는 dy, dx에 const를 사용
    //  */
    //////////////////////////////////////////////////////////////////////
    // const int mx = 10;
    // int a[mx][mx];
    // int x = 10;
    // printconstRef(x);

    //////////////////////////////////////////////////////////////////////
    // /**
    //  * 범위 기반 for문
    //  */
    //////////////////////////////////////////////////////////////////////
    // vector<int> vec = {10, 20, 30, 40, 50};
    // for (const int& value: vec){
    //     cout << value << " ";
    //     // value = 100; // 에러발생, value는 const 참조이기때문
    // }

    //////////////////////////////////////////////////////////////////////
    // /**
    //  * 오버플로(overflow)
    //  * 최대 범위를 넘어가면 최대값 + 1이 아닌 최소값으로 돌아가게됨
    //  * UB(unexpected Behavior) - 예측할 수 없는 값
    //  */
    //////////////////////////////////////////////////////////////////////
    // int a = 2147483647;
    // cout << a << '\n'; // 2147483647
    // a++;
    // cout << a << '\n'; // -2147483648

    //////////////////////////////////////////////////////////////////////
    // /**
    //  * 언더플로 (underflow)
    //  * 오버플로와 반대로 취급할 수 있는 결과값보다 작아지게 되면 언더플로가 발생
    //  */
    //////////////////////////////////////////////////////////////////////
    // int a = -2147483648;
    // cout << a << '\n'; // -2147483648
    // a--;
    // cout << a << '\n'; // 2147483647

    //////////////////////////////////////////////////////////////////////
    // /**
    //  * long long, 8바이트 정수타입
    //  * 범위는 –9,223,372,036,854,775,808 ~ 9,223,372,036,854,775,807
    //  */
    //////////////////////////////////////////////////////////////////////
    // typedef long long ll;
    // ll INF = 1e18;

    //////////////////////////////////////////////////////////////////////
    // /**
    //  * double, 8바이트 실수타입
    //  * 소수점 아래로 15자리까지 표현이 가능
    //  * float은 4바이트 소수점 7자리까지 표현 가능
    //  */
    //////////////////////////////////////////////////////////////////////
    // double pi = 3.221;
    // cout << pi << '\n';

    //////////////////////////////////////////////////////////////////////
    // /**
    //  * unsigned long long, 8바이트 양의 정수
    //  * 부호가 없는 정수로, 범위 : 0 ~ 18,446,744,073,709,551,615
    //  */
    //////////////////////////////////////////////////////////////////////
    // unsigned long long ull;
    // ull = 18446744073709551615;
    // cout << ull << '\n';
    // ull++;
    // cout << ull << '\n';

    //////////////////////////////////////////////////////////////////////
    // /**
    //  * pair와 tuple
    //  * c++에서 제공하는 utility 라이브러리 헤더의 템플릿 클래스
    //  * pair : first와 second라는 멤버변수 2개를 가지는 클래스
    //  * tuple : 3가지 이상의 값을 담을 때 사용하는 클래스
    //  */
    //////////////////////////////////////////////////////////////////////
    // pair<int, int> pi;
    // tuple<int, int, int> tl;
    // int a, b, c;
    // pi = {1, 2};
    // tl = make_tuple(1, 2, 3);
    // tie(a, b) = pi;
    // cout << a << " : " << b << "\n";
    // tie(a, b, c) = tl;
    // cout << a << " : " << b << " : " << c << "\n";

    // pair<int, int> pi;
    // tuple<int, int, int> ti;
    // int a, b, c;

    // pi = {1, 2};
    // a = pi.first;
    // b = pi.second;
    // cout << a << " : " << b << "\n";
    
    // ti = make_tuple(1, 2, 3);
    // // get<?>(ti); 꺼내는 방식은 비추, 3가지 이상 멤버변수가 필요하면 struct를 사용
    // a = get<0>(ti);
    // b = get<1>(ti);
    // c = get<2>(ti);
    // cout << a << " : " << b << " : " << c << "\n";

    //////////////////////////////////////////////////////////////////////
    /**
     * auto 타입 (타입 추론)
     * auto 타입은 주로 복잡하고 긴 타입의 변수명을 대신 할 때 사용됨
     */
    //////////////////////////////////////////////////////////////////////
    // int a = 1;
    // auto b = 1;
    // cout << b << "\n";
    // vector<pair<int, int>> v;
    // for(int i = 1; i <= 5; i++){
    //     v.push_back({i, i});
    // }
    // for(auto it : v){
    //     cout << it.first << " : " << it.second << "\n";
    // }
    // for(pair<int, int> it : v){
    //     cout << it.first << " : " << it.second << "\n";
    // }


    //////////////////////////////////////////////////////////////////////
    // /**
    //  * 타입 변환
    //  * 중요한 점은 연산할때는 같은타입끼리 해야 함
    //  */
    //////////////////////////////////////////////////////////////////////
    // // int -> double
    // double ret = 2.12345;
    // int n = 2;
    // int a = (int)round(ret / double(n));
    // cout << a << "\n";



    //////////////////////////////////////////////////////////////////////
    // /**
    //  * vector size() 연산시 주의할 점
    //  * vector.size()는 unsigned int를 반환하기 때문에 음수가 나오지 않고 큰 숫자가 나올 수 있음
    //  * 
    //  * 앞쪽에서만 타입 변환이 이루어짐
    //  * int a = (int) p * 100 // 1
    //  * int a = (int) 100 * p // 2
    //  */
    //////////////////////////////////////////////////////////////////////

    // // bad
    // vector<int> a = {1, 2, 3};
    // cout << a.size() - 10 << '\n'; // 18446744073709551609

    // // good
    // vector<int> b = {1, 2, 3};
    // cout << (int)b.size() - 10 << '\n'; // -7

    //////////////////////////////////////////////////////////////////////
    // /**
    //  * 문자를 숫자로, 숫자를 문자로
    //  * 소문자로 된 문자를 숫자로 바꾸려면 아스키코드를 이용할 수 있음
    //  * 
    //  * (int)a는 97이라는 값을 가짐. 그리고 이를 97을 빼면 0이죠. 또한 ‘a’를 빼게 되면
    //  * 자동적으로 아스키코드에 매핑되어있는 97을 빼게 되서 0이 됨
    //  */
    //////////////////////////////////////////////////////////////////////

    // // a부터 시작해 z부터 입력을 받는데 이를 정수 0 ~ 25까지 표현하고 싶다면?
    // char a = 'a'; // 97
    // char A = 'A'; // 65
    // cout << (int)a << "\n"; // 97
    // cout << (int)a - 97 << "\n"; // 0
    // cout << (int)a - 'a' << "\n"; // 0
    return 0;
}