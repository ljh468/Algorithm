# [문제] 개미전사 : 문제설명
# 개미 전사는 부족한 식량을 충당하고자 메뚜기 마을의 식량창고를 몰래 공격하려고 합니다.
# 메뚜기 마을에는 여러 개의 식량창고가 있는데 식량창고는 일직선으로 이어져 있습니다.
# 각 식량창고에는 정해진 수의 식량을 저장하고 있으며 개미 전사는 식량창고를 선택적으로 약탈하여 식량을 빼앗을 예정입니다.
# 이때 메뚜기 정찰병들은 일직선상에 존재하는 식량창고 중에서 서로 인접한 식량창고가 공격받으면 바로 알아챌 수 있습니다.
# 따라서 개미전사가 정찰병에게 들키지 않고 식량창고를 약탈하기 위해서는 최소한 한 칸 이상 떨어진 식량창고를 약탈해야 합니다.
# 예시) 창고0 |창고1 |창고2 |창고3
#        1     3     1     5

# 이때 개미 전사는 두 번째 식량창고와 네 번째 식량창고를 선택했을 때 최댓값인 총 8개의 식량을 빼앗을 수 있습니다.
# 개미전사는 식량창고가 이렇게 일직선상일 때 최대한 많은 식량을 얻기를 원합니다.
# 개미전사를 위해 식량창고 N개에 대한 정보가 주어졌을 때 얻을 수 있는 식량의 최댓값을 구하는 프로그램을 작성하세요.

# 입력 예시) n = 4, k = [1, 3, 1, 5]
# 출력 예시) 8

# 문제 해결 아이디어
# n = 4일때, 식량을 선택할 수 있는 경우의 수는 8가지
# 7번째 3, 5 경우 8만큼의 식량을 얻을 수 있으므로 최적의 해는 8입니다.
# Ai = i번째 식량창고까지의 최적의 해 (얻을 수 있는 식량의 최댓값)
# 이렇게 정의한다면 다이나믹 프로그래밍을 적용할 수 있습니다.

# 왼쪽부터 차례대로 식량창고를 턴다고 했을 때, 특정한 i번재 식량창고에 대해서 털지 안 털지의 여부를 결정하면,
# 아래 2가지 경우 중에서 더 많은 식량을 털 수 있는 경우를 선택하면 됩니다.
# 점화식 : A(i) = max(A(i-1), A(i-2) + K(i))

# 개미전사: 답안 예시
# 정수 N을 입력 받기
# n = input()
n = 4
# 모든 식량 정보 입력 받기
# array = list(map(int, input().split()))
array = [1, 3, 1, 5]
# 앞서 계산된 결과를 저장하기 위한 DP 테이블 초기화
d = [0] * 100

# 다이나믹 프로그래밍(Dynamic Programming) 진행 (보텀업)
d[0] = array[0]
d[1] = max(array[0], array[1])
for i in range(2, n):
    d[i] = max(d[i-1], d[i-2] + array[i])

print(d[n-1])