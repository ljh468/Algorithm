# 다이나믹 프로그래밍은 메모리를 적절히 사용하여 수행 시간 효율성을 비약적으로 향상시키는 방법
# 한번 해결한 문제는 다시 해결하지 않게 함 (동적 계획법)
# 이미 계산된 결과(작은 문제)는 별도의 메모리 영역에 저장하여 다시 계산하지 않도록 함
# 다이나믹 프로그래밍의 구현은 일반적으로 두 가지 방식(탑다운과 보텀업)으로 구성됨

# 자료구조에서 동적 할당(Dynamic Allocation)은 '프로그램이 실행되는 도중에 실행에 필요한 메모리를 할당하는 기법'을 의미
# 다이나믹 프로그래밍에서 Dynamic은 별다른 의미없이 사용된 단어이다.
print('########################################################')

# 다이나믹 프로그래밍의 조건
# 다이나믹 프로그래밍은 문제가 다음의 조건을 만족할 때 사용 할 수 있음
# 1. 최적 부분 구조(Optimal Substructure)
# 큰 문제를 작은 문제로 나눌 수 있으며 작은 문제의 답을 모아서 큰문제를 해결할 수 있을때

# 2. 중복되는 부분 문제(Overlapping Subproblem)
# 동일한 작은 문제를 반복적으로 해결해야 할때
print('########################################################')

# 피보나치 수열
# 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89
# 점화식이란 인접한 항들 사이의 관계식을 의미합니다.
# 피보나치 수열을 점화식으로 표현하면
# An = An-1 + An-2
# A1 = 1, A2 = 1
def fibo(x):
    if x == 1 or x == 2:
        return 1
    return fibo(x - 1) + fibo(x - 2)
print(fibo(4))

fib_array = [0, 1]
def fib_recur_dp(n):
    if n < len(fib_array):
        return fib_array[n]
    else:
        fib = fib_recur_dp(n-1) + fib_recur_dp(n-2)
        fib_array.append(fib)
        return fib

print(fib_recur_dp(4))
print('########################################################')

# 다이나믹 프로그래밍
# 메모이제이션 (Memoization)
# 메모이제이션은 다이나믹 프로그래밍을 구현하는 방법 중 하나입니다.
# 한 번 계산한 결과를 메모리 공간에 메모하는 기법
# 같은 문제를 다시 호출하면 메모했던 결과를 그대로 가져옴
# 값을 기록해 놓는다는 점에서 캐싱(Caching)이라고도 합니다.

# 탑다운 VS 보텀업
# 탑다운(메모이제이션)방식은 하향식이라고도 하며 보텀업 방식은 상향식이라고도 합니다.
# 다이나믹 프로그래밍의 전형적인 형태는 보텀업 방식입니다.
# 결과 저장용 리스트는 DP 테이블이라고 부릅니다.
# 엄밀히 말하면 메모이제이션은 이전에 계산된 결과를 일시적으로 기록해 놓는 넓은 개념을 의미합니다.
# 따라서 메모이제이션은 다이나믹 프로그래밍에 국한된 개념은 아닙니다.
# 한 번 계산된 결과를 담아 놓기만 하고 다이나믹 프로그래밍을 위해 활용하지 않을 수 도 있습니다.
print('########################################################')

# 피보나치 수열 : 탑다운 다이나믹 프로그래밍 소스코드
# 한 번 계산된 결과를 메모이제이션(Memoization)하기 위한 리스트 초기화
d = [0] * 100
# 피보나치 함수(Fibonacci Function)를 재귀함수로 구현(탑다운 다이나믹 프로그래밍)
def fibo(x):
    # 종료 조건(1 or 2일때 1을 반환
    if x == 1 or x ==2:
        return 1
    # 이미 계산한 적 있는 문제라면 그대로 반환
    if d[x] != 0:
        return d[x]
    # 아직 계산하지 않은 문제라면 점화식에 따라서 피보나치 결과 반환
    d[x] = fibo(x - 1) + fibo(x - 2)
    return d[x]
print(fibo(99))

# 피보나치 수열 : 보텀업 다이나믹 프로그래밍 소스코드
# 앞서 계산된 결과를 저장하기 위한 DP 테이블 초기화
d = [0] * 100
# 첫 번째 피보나치 수와 두 번째 피보나치 수는 1
d[1] = 1
d[2] = 1
n = 99

# 피보나치 함수(Fibonacci Function)를 반복문으로 구현(탑다운 다이나믹 프로그래밍)
for i in range(3, n + 1):
    d[i] = d[i - 1] + d[i - 2]
print(d[n])