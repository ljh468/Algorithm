# [문제 00] 떡볶이 떡 만들기 : 문제설명
# - 떡볶이 떡을 만드려는데 떡의 길이가 일정하지않음, 대신에 1봉지안에 들어가는 떡의 총 길이는 절단기로 잘라서 맞추줌
# - 절단기에 높이(H)를 지정하면 줄지어진 떡이 한번에 절단됨
# - 높이가 H보다 긴떡은 H의 위의 부분이 잘릴것이고, 낮은 떡은 잘리지 않음
# - 예를들어 높이가 19, 14, 10, 17cm 인 떡이 나란히 있고 높이를 15cm로 지정하면
# - 자른 뒤 떡의 높이는 15, 14, 10, 15가 될것, 잘린 떡의 길이는 4 0 0 2 이며
# 손님은 6cm만큼의 길이를 가져감, 손님이 왔을때 요청한 총 길이가 M일때 적어도 M만큼의 떡을 얻기위해 절단기에
# 설정할 높이의 최대값을 구하는 프로그램 작업을 작성하시오
# 입력 예시 ) n = 4 (떡의 개수)
#           m = 6 (떡의 길이)
#       array = [19, 15, 10, 17] (개별 떡의 높이)

# 적어도 M만큼의 떡을 집에 가져가기 위해 절단기에 설정할 높이의 최대값을 구하시오.

# 문제해결 아이디어
# - 적절한 높이를 찾을 때까지 이진탐색을 수행하여 높이 H를 반복해서 조정하면됨
# - '현재 이 높이로 자르면 조건을 만족할 수 있는가? ' 를 확인한 뒤에 조건의 만족 여부( '예' 혹은 '아니오')에
#    따라서 탐색범위를 좁혀서 해결
# - 절단기의 높이는 0부터 10억까지의 정수 중 하나 입니다.
#   (이렇게 큰 탐색범위를 보면 가장 먼저 이진탐색을 떠올려야함)

# Step 1 : 시작점 0, 끝점 19, 중간점 9 --> 이때 필요한 떡의 크기 : M = 6
# 중간점 9로 놓고 잘린떡의 길이는 10 + 6 + 1 + 8 = 25

# Step 2 : 시작점 10, 끝점 19, 중간점 14
# 중간점 14로 놓고 잘린떡의 길이는 5, 1, 0, 3 = 9

# Step 3 : 시작점 14, 끝점 19, 중간점 17
# 중간점 17로 놓고 잘린떡의 길이는 2

# Step 4 : 시작점 14, 끝점 16, 중간점 15
# 중간점 15로 놓고 잘린떡의 길이는 4, 2  = 6 (필요한떡 M = 6 , 잘린떡 H = 6)

# 이러한 이진탐색 과정을 반복하면 중간점의 값은 '최적화된 값'이 되기때문에
# 과정을 반복하면서 얻을수 있는 떡의 길이의 합이 필요한 떡의 길이 보다 크거나 같을때 마다
# 중간점의 값을 기록하면 됨

# 떡의 개수(N), 요청한 떡의길이(M)을 입력, 각 떡의 개별 높이(array) 정보 입력
# n, m = list(map(int, input().split(' ')))
n, m = 4, 6
# array = list(map(int, input().split()))
array = [19, 15, 10, 17]

# 이진탐색을 위한 시작점과 끝점 설정
start, end = 0, max(array)

# 이진탐색 수행(반복적)
result = 0
while (start <= end):
    total = 0
    mid = (start + end) // 2
    for x in array:
        if x > mid:  # 잘랐을때 떡의 양 계산
            total += x - mid
    if total < m:  # 떡의 양이 부족하면 왼쪽부분 탐색(떡의 높이를 줄임)
        end = mid - 1
    else:  # 떡의 양이 충분하면 오른쪽부분 탐색 (mid를 올림)
        result = mid
        start = mid + 1

print(result)  # 자를 떡의 높이(H)를 출력