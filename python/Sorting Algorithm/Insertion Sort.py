# 삽입 정렬
# 처리되지 않은 데이터를 하나씩 골라 적절한 위치에 삽입
# 선택 정렬에 비해 구현 난이도가 높지만 더 효율적으로 동작

# step 0 : 7, 5, 9, 0, 3, 1
# step 1 : 5, 7, 9, 0, 3, 1
# step 2 : 5, 7, 9, 0, 3, 1
# step 3 : 0, 5, 7, 9, 3, 1
# step n : 0, 1, 3, 5, 7, 9

print('####################################################')
# 예제 01) 삽입 정렬 소스코드 예제
array = [7, 5, 9, 0, 3, 1, 6, 2, 4, 8]

for i in range(1, len(array)):
    for j in range(i, 0, -1):  # 인덱스 i부터 1까지 1씩 감소하며 반복(한칸씩 왼쪽 이동)
        if array[j] < array[j - 1]:  # 기준 데이터가 왼쪽 데이터보다 작으면
            array[j], array[j - 1] = array[j - 1], array[j]  # swap
        else:
            break
print(array)

# 반복1 :  i = 1부터 n-1까지
# 반복2 :  j = i부터 1까지 -1만큼
# 삽입정렬은 반복문이 두번 중첩되어 사용되기 때문에 시간복잡도는 O(N^2)
# 그러나 데이터가 거의 정렬되어 있는 상태라면 O(N)까지 줄일 수 있음
